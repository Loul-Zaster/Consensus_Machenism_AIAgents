import streamlit as st
import os
import sys
import time
import markdown
from pathlib import Path
from dotenv import load_dotenv

# Th√™m th∆∞ m·ª•c g·ªëc v√†o ƒë∆∞·ªùng d·∫´n
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Load environment variables
load_dotenv()

# Import c√°c module c·∫ßn thi·∫øt
from app.langraph.main import get_medical_diagnosis

st.set_page_config(
    page_title="Consensus Mechanism AI Agents",
    page_icon="ü©∫",
    layout="wide",
)

def main():
    st.title("Consensus Mechanism AI Agents")
    st.subheader("H·ªá th·ªëng ch·∫©n ƒëo√°n y t·∫ø d·ª±a tr√™n ƒë·ªìng thu·∫≠n AI")

    # Sidebar cho th√¥ng tin v·ªÅ h·ªá th·ªëng
    with st.sidebar:
        st.header("Th√¥ng tin")
        st.info("""
        **Consensus Mechanism AI Agents** l√† h·ªá th·ªëng s·ª≠ d·ª•ng nhi·ªÅu AI agent ƒë·ªÉ th·ª±c hi·ªán:
        1. Nghi√™n c·ª©u y t·∫ø theo th·ªùi gian th·ª±c
        2. X√°c minh ƒë·ªô tin c·∫≠y c·ªßa ngu·ªìn
        3. ƒê∆∞a ra nhi·ªÅu ch·∫©n ƒëo√°n ƒë·ªôc l·∫≠p
        4. T·∫°o k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã
        5. ƒê∆∞a ra k·∫øt lu·∫≠n ƒë·ªìng thu·∫≠n
        """)
        
        st.header("API Keys")
        # Hi·ªÉn th·ªã tr·∫°ng th√°i API keys
        io_api_key = os.getenv("IOINTELLIGENCE_API_KEY")
        openai_api_key = os.getenv("OPENAI_API_KEY")
        serper_api_key = os.getenv("SERPER_API_KEY")
        
        if io_api_key:
            st.success("‚úÖ IOINTELLIGENCE_API_KEY: ƒê√£ c·∫•u h√¨nh")
        elif openai_api_key:
            st.success("‚úÖ OPENAI_API_KEY: ƒê√£ c·∫•u h√¨nh")
        else:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y API key cho LLM. C·∫ßn c√≥ OPENAI_API_KEY ho·∫∑c IOINTELLIGENCE_API_KEY")
            
        if serper_api_key:
            st.success("‚úÖ SERPER_API_KEY: ƒê√£ c·∫•u h√¨nh")
        else:
            st.warning("‚ö†Ô∏è SERPER_API_KEY: Ch∆∞a c·∫•u h√¨nh (t√¨m ki·∫øm th·ªùi gian th·ª±c s·∫Ω kh√¥ng ho·∫°t ƒë·ªông)")

    # Form nh·∫≠p th√¥ng tin
    with st.form("diagnosis_form"):
        st.header("Nh·∫≠p th√¥ng tin b·ªánh nh√¢n")
        
        col1, col2 = st.columns(2)
        
        with col1:
            topic = st.text_input("Ch·ªß ƒë·ªÅ y t·∫ø c·∫ßn nghi√™n c·ª©u", "Tinnitus")
            symptoms = st.text_area("Tri·ªáu ch·ª©ng", "Ringing in ears, difficulty sleeping")
        
        with col2:
            medical_history = st.text_area("Ti·ªÅn s·ª≠ b·ªánh", "Recent concert attendance, no prior hearing issues")
            test_results = st.text_area("K·∫øt qu·∫£ x√©t nghi·ªám", "None")
        
        use_realtime = st.checkbox("S·ª≠ d·ª•ng t√¨m ki·∫øm web th·ªùi gian th·ª±c", value=False)
        
        submit_button = st.form_submit_button("B·∫Øt ƒë·∫ßu ch·∫©n ƒëo√°n")
    
    # X·ª≠ l√Ω khi nh·∫•n n√∫t ch·∫©n ƒëo√°n
    if submit_button:
        if not (os.getenv("IOINTELLIGENCE_API_KEY") or os.getenv("OPENAI_API_KEY")):
            st.error("Thi·∫øu API key cho LLM. Vui l√≤ng c·∫•u h√¨nh OPENAI_API_KEY ho·∫∑c IOINTELLIGENCE_API_KEY trong file .env")
            return
            
        if use_realtime and not os.getenv("SERPER_API_KEY"):
            st.warning("Thi·∫øu SERPER_API_KEY cho t√¨m ki·∫øm web. H·ªá th·ªëng s·∫Ω s·ª≠ d·ª•ng d·ªØ li·ªáu m√¥ ph·ªèng.")
        
        # Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh
        progress_bar = st.progress(0)
        status_text = st.empty()
        result_container = st.empty()
        
        try:
            # C√°c giai ƒëo·∫°n c·ªßa quy tr√¨nh ch·∫©n ƒëo√°n
            stages = [
                "Nghi√™n c·ª©u y khoa",
                "X√°c minh ƒë·ªô tin c·∫≠y ngu·ªìn",
                "Ph√¢n t√≠ch ch·∫©n ƒëo√°n",
                "ƒê·ªÅ xu·∫•t ƒëi·ªÅu tr·ªã",
                "X√¢y d·ª±ng ƒë·ªìng thu·∫≠n",
                "Ho√†n th√†nh b√°o c√°o"
            ]
            
            # B·∫Øt ƒë·∫ßu ch·∫°y quy tr√¨nh ch·∫©n ƒëo√°n th·∫≠t
            with st.spinner("ƒêang nghi√™n c·ª©u v√† ph√¢n t√≠ch..."):
                status_text.text(f"ƒêang th·ª±c hi·ªán: {stages[0]}...")
                progress_bar.progress(1/len(stages))
                
                result = get_medical_diagnosis(
                    topic=topic,
                    symptoms=symptoms,
                    medical_history=medical_history,
                    test_results=test_results,
                    realtime=use_realtime
                )
                
                # Hi·ªÉn th·ªã ti·∫øn tr√¨nh cho c√°c b∆∞·ªõc c√≤n l·∫°i
                for i in range(1, len(stages)):
                    status_text.text(f"ƒêang th·ª±c hi·ªán: {stages[i]}...")
                    progress_bar.progress((i+1)/len(stages))
                    time.sleep(0.5)  # Gi·∫£ l·∫≠p ti·∫øn tr√¨nh
            
            status_text.text("Ho√†n th√†nh ch·∫©n ƒëo√°n!")
            progress_bar.progress(100)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            with result_container.container():
                st.success("Ch·∫©n ƒëo√°n ho√†n t·∫•t! Xem k·∫øt qu·∫£ b√™n d∆∞·ªõi:")
                st.divider()
                
                st.header(f"Ch·∫©n ƒëo√°n cho: {result['topic']}")
                
                st.subheader("K·∫øt lu·∫≠n ƒë·ªìng thu·∫≠n")
                st.markdown(result['consensus'])
                
                st.subheader("Ch·∫©n ƒëo√°n")
                if isinstance(result['diagnoses'], list):
                    for i, diag in enumerate(result['diagnoses']):
                        st.write(f"{i+1}. {diag}")
                else:
                    st.markdown(result['diagnoses'])
                
                st.subheader("ƒê·ªÅ xu·∫•t ƒëi·ªÅu tr·ªã")
                if isinstance(result['treatments'], list):
                    for i, treat in enumerate(result['treatments']):
                        st.write(f"{i+1}. {treat}")
                else:
                    st.markdown(result['treatments'])
                
                # Hi·ªÉn th·ªã th√¥ng tin nghi√™n c·ª©u n·∫øu c√≥
                with st.expander("Xem th√¥ng tin nghi√™n c·ª©u chi ti·∫øt"):
                    st.write(result['research_findings'])
                    
                    st.subheader("Ngu·ªìn tham kh·∫£o")
                    for source in result['verified_sources']:
                        st.write(f"- {source}")
                    
                    st.write(f"**ƒêi·ªÉm tin c·∫≠y ngu·ªìn**: {result['source_credibility']:.2f}/1.0")
                
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ch·∫©n ƒëo√°n: {str(e)}")
            st.error("Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh v√† API keys trong file .env")

if __name__ == "__main__":
    main() 